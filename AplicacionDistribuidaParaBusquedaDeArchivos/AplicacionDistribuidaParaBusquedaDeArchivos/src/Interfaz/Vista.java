package Interfaz;

import Logica.AdministradorDeOperacionesDatagrama;
import static Logica.AdministradorDeOperacionesDatagrama.BUSCAR;
import static Logica.AdministradorDeOperacionesDatagrama.ENCONTRADO;
import Logica.AdministradorDeOperacionesFlujo;
import Logica.AdministradorDeOperacionesMulticast;
import static Logica.AdministradorDeOperacionesMulticast.FIN_ID;
import static Logica.AdministradorDeOperacionesMulticast.INICIO_ID;
import Logica.TransferenciaListener;
import Logica.Mensaje;
import Logica.Nodo;
import Logica.OperacionesNodo;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


/**
 *
 * @author miguel
 * inicializar Nodo actual
 */
public class Vista extends javax.swing.JFrame implements ActionListener, TransferenciaListener{
    private int puerto;
    private String ip;
    private Nodo nodo;
    
    private ArrayList nodos;
    private boolean primerNodo;
    private boolean ultimoNodo;
    private boolean inicioPeticion;
    private Nodo nodoSiguiente;
    private Nodo nodoAnterior;
    private String nodosDisponibles;
    private String logTemporal;
    
   
    public Vista() throws IOException {
        initComponents();
        init();
    }

    private void init() throws IOException
    {
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        DialogoPuerto dp = new DialogoPuerto(new javax.swing.JFrame(), true);
        dp.setVisible(true);
        puerto = dp.getPuerto();
        if(puerto == -1 )
            System.exit(0);
        nodosConectados.setContentType("text/html");
        logTemporal = "";
        this.setTitle("" + puerto);
        buscar.addActionListener(this);
        log.setEditable(false);
        nodosConectados.setEditable(false);
        jpfondo.setBackground(Color.WHITE);
        progreso.setMaximum((100));  
        nodos = new ArrayList();
        ip = InetAddress.getLocalHost().getHostAddress();
        nodo = new Nodo(ip + ":" + puerto ,ip, puerto);   
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                try {
                    close();
                } catch (IOException ex) {
                    Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    
                }
            }
        });
         
        anunciar();
        actualizarListaDeNodosMulticast();
        recibirDatagrama();
        enviarArchivo();
        
         System.out.print(puerto+"\n");
         
    }
    
    
    private void close() throws IOException{
        if (JOptionPane.showConfirmDialog(rootPane, "Â¿Deseas salir?",
                "Salir", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            AdministradorDeOperacionesMulticast.getInstance().salirDelAnillo(nodo.getId());
            System.exit(0);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpfondo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        nodosConectados = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        idAnterior = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        idSiguiente = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        log = new javax.swing.JEditorPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        nombreArchivo = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        progreso = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        nodosConectados.setContentType("text/html\n"); // NOI18N
        jScrollPane1.setViewportView(nodosConectados);

        jLabel1.setText("ID Anterior");

        jLabel2.setText("ID Siguiente");

        log.setContentType("text/html"); // NOI18N
        jScrollPane2.setViewportView(log);

        jScrollPane3.setViewportView(nombreArchivo);

        buscar.setText("Buscar");

        jLabel3.setText("Archivo a buscar");

        javax.swing.GroupLayout jpfondoLayout = new javax.swing.GroupLayout(jpfondo);
        jpfondo.setLayout(jpfondoLayout);
        jpfondoLayout.setHorizontalGroup(
            jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpfondoLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(buscar)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane3)
                    .addComponent(progreso, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addComponent(idAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addComponent(idSiguiente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jpfondoLayout.setVerticalGroup(
            jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpfondoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpfondoLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(idSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jpfondoLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscar)
                        .addGap(21, 21, 21))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpfondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpfondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Vista().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscar;
    private javax.swing.JLabel idAnterior;
    private javax.swing.JLabel idSiguiente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel jpfondo;
    private javax.swing.JEditorPane log;
    private javax.swing.JEditorPane nodosConectados;
    private javax.swing.JTextField nombreArchivo;
    private javax.swing.JProgressBar progreso;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent ae) 
    {
        if(ae.getSource().equals(buscar))
        {
            if(nombreArchivo.getText().length() < 1)
            {
                UIFunctions.warningMessage("Introduce archivo a buscar", " ");
            }
            else
            {
                String nombre = nombreArchivo.getText();
            
                if(OperacionesNodo.buscarArchivo(nombre, puerto))
                {
                    logTemporal += ("Archivo: " + nombre + " encontrado en el mismo nodo<br>");
                    log.setText(logTemporal);
                }
                else
                {
                    if(nodos.size() > 0)
                    {
                        Mensaje m = new Mensaje();
                        m.setId(BUSCAR);
                        m.setNombreOrigen(nodo.getId());
                        m.setMensaje(nombre);
                        try {
                            AdministradorDeOperacionesDatagrama.getInstance(puerto)
                                    .enviarMensaje(m, nodoSiguiente.getIp(),
                                            nodoSiguiente.getPuerto());

                        } catch (SocketException ex) {
                            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else
                    {
                        logTemporal += ("Archivo no encontrado, no hay mÃ¡s nodos<br>");
                        log.setText(logTemporal);
                    }
                }
            }
            nombreArchivo.setText("");
        }
    }
    
    
    
    
    private void actualizarMulticast() throws IOException
    {
        Mensaje mensaje = AdministradorDeOperacionesMulticast.getInstance().recibe();
        if (mensaje.getNombreOrigen() != null) {
            switch (mensaje.getId()) {
                case INICIO_ID:
                    if (!mensaje.getNombreOrigen().equals(nodo.getId())) 
                    {
                        if(inicioNodo(mensaje.getNombreOrigen()))
                        {
                            actualizarListaDeNodos();
                            nodoSiguiente = getNodoSiguiente(puerto);
                            nodoAnterior = getNodoAnterior(puerto);
                            idAnterior.setText(nodoAnterior.getId());
                            idSiguiente.setText(nodoSiguiente.getId());
                        }
                    }
                    break;
                case FIN_ID:
                    if(finNodo(mensaje.getNombreOrigen()))
                    {
                        actualizarListaDeNodos(); 
                        if(nodos.size() > 0)
                        {
                            nodoSiguiente = getNodoSiguiente(puerto);
                            nodoAnterior = getNodoAnterior(puerto);
                            idAnterior.setText(nodoAnterior.getId());
                            idSiguiente.setText(nodoSiguiente.getId());
                        }
                        else
                        {
                            idAnterior.setText("");
                            idSiguiente.setText("");
                        }
                    }
                    break;
                
                default:

            }
        }
    }
    
    private void actualizarDatagrama() throws IOException
    {
        Mensaje mensaje = AdministradorDeOperacionesDatagrama
                            .getInstance(puerto).recibe();
        mensaje.imprimir();
        switch (mensaje.getId()) 
        {
            case BUSCAR:
                if (mensaje.getNombreOrigen().equals(nodo.getId())) 
                {
                    logTemporal += ("Archivo: " + mensaje.getMensaje() + " no encontrado "
                            + "en el anillo<br>");
                    log.setText(logTemporal);
                }
                else
                {
                    logTemporal += ("Buscando: " + mensaje.getMensaje() + "<br>");
                    log.setText(logTemporal);
                    if (OperacionesNodo.buscarArchivo(mensaje.getMensaje(), puerto)) 
                    {
                        logTemporal += ("Archivo: " + mensaje.getMensaje() + " encontrado<br>");
                        log.setText(logTemporal);
                        
                        mensaje.setId(ENCONTRADO);
                        mensaje.setNombreDestino(mensaje.getNombreOrigen());
                        mensaje.setNombreOrigen(nodo.getId());
                        AdministradorDeOperacionesDatagrama
                                .getInstance(puerto).enviarMensaje(mensaje,
                                nodoAnterior.getIp(), nodoAnterior.getPuerto());

                    } else 
                    {
                        logTemporal += ("Archivo: " + mensaje.getMensaje() + " No encontrado<br>");
                        log.setText(logTemporal);

                        AdministradorDeOperacionesDatagrama
                                .getInstance(puerto).enviarMensaje(mensaje,
                                nodoSiguiente.getIp(), nodoSiguiente.getPuerto());
                    }
                    
                }
                break;
                
            case ENCONTRADO:
                logTemporal += ("Archivo: " + mensaje.getMensaje() + " encontrado "
                        + "en " + mensaje.getNombreOrigen()+"<br>");
                log.setText(logTemporal);
                if(mensaje.getNombreDestino().equals(nodo.getId()))
                {
                    String ip = getIP(mensaje.getNombreOrigen());
                    int puerto = getPuerto(mensaje.getNombreOrigen()) + 100;
                    progreso.setValue(0);
                    AdministradorDeOperacionesFlujo.getInstance(puerto)
                    .solicitarArchivo(ip, puerto, mensaje.getMensaje(), this.puerto + "", this);
                    
                }
                else
                {
                     AdministradorDeOperacionesDatagrama
                                .getInstance(puerto).enviarMensaje(mensaje,
                                nodoAnterior.getIp(), nodoAnterior.getPuerto());
                }
                
                break;
                
            default:

        }
        
    }
    
    
    private boolean esElMayor(int idNodo)
    {
        int tam = nodos.size();
        Nodo n;
        for(short i = 0; i < tam ; i++)
        {
            n = (Nodo) nodos.get(i);
            if(n.getPuerto() > idNodo)
                   return false;
        }
        return true;
        
    }
    
    private boolean esElMenor(int idNodo)
    {
        int tam = nodos.size();
        Nodo n;
        for(short i = 0; i < tam ; i++)
        {
            n = (Nodo) nodos.get(i);
            if(idNodo > n.getPuerto())
                   return false;
        }
        return true;
    }
    
    private Nodo getNodoMenor()
    {
        int tam = nodos.size();
        Nodo n = (Nodo) nodos.get(0);
        int menor = n.getPuerto();
        int j = 0;
        for (short i = 1; i < tam; i++) 
        {
            n = (Nodo) nodos.get(i);
            if (n.getPuerto() < menor) 
            {
                menor = n.getPuerto();
                j = i;
            }
        }
        return (Nodo) nodos.get(j);
    }
    
    private Nodo getNodoMayor()
    {
        int tam = nodos.size();
        Nodo n = (Nodo) nodos.get(0);
        int mayor = n.getPuerto();
        int j = 0;
        for (short i = 1; i < tam; i++) 
        {
            n = (Nodo) nodos.get(i);
            if (n.getPuerto() > mayor) 
            {
                mayor = n.getPuerto();
                j = i;
            }
        }
        return (Nodo) nodos.get(j);
    }
    
    
    private Nodo getNodoSiguiente(int idNodoPuerto)
    {
        Nodo n = null;
        if(esElMayor(idNodoPuerto))
        {
            n = getNodoMenor();
        }
        else
        {
            int tam = nodos.size();
            int resta = 2147483647;
            int aux, j = 0;
            for (short i = 0; i < tam; i++) 
            {
                n = (Nodo) nodos.get(i);
                aux = n.getPuerto() - idNodoPuerto;
                if (aux < resta && aux > 0) 
                {
                    resta = aux;
                    j = i;
                }
            }
            n = (Nodo) nodos.get(j);
        }
        return n;
        
    }
    
    private Nodo getNodoAnterior(int idNodoPuerto)
    {
        Nodo n = null;
        if(esElMenor(idNodoPuerto))
        {
            n = getNodoMayor();
        }
        else
        {
            
            int tam = nodos.size();
            int resta = 2147483647;
            int aux, j = 0;
            for (short i = 0; i < tam; i++) {
                n = (Nodo) nodos.get(i);
                aux =  idNodoPuerto - n.getPuerto();
                if (aux < resta && aux > 0) 
                {
                    resta = aux;
                    j = i;
                }
            }
            n = (Nodo) nodos.get(j);
        }
        return n;
        
    }
    
    
    private void actualizarListaDeNodos()
    {
        nodosDisponibles = "";
        int tam = nodos.size();
        Nodo n;
        for(short i = 0; i < tam ; i++)
        {
            n = (Nodo) nodos.get(i);
            nodosDisponibles += ("<br>" + n.getId());  
        }
        nodosConectados.setText(nodosDisponibles);
    }
    
    private boolean finNodo(String id)
    {
        int tam = nodos.size();
        Nodo n;
        for(short i = 0; i < tam ; i++)
        {
            n = (Nodo) nodos.get(i);
            if(n.getId().equals(id))
            {
                nodos.remove(i);
                return true;
            }
        }
        return false;
        
    }
    
    private boolean inicioNodo(String id)
    {
        int tam = nodos.size();
        Nodo n;
        for(short i = 0; i < tam ; i++)
        {
            n = (Nodo) nodos.get(i);
            if(n.getId().equals(id))
                return false;
        }
        nodos.add(new Nodo(id, getIP(id), getPuerto(id)));
        return true;
    }
    
    
    private void imprimirNodo(Nodo n)
    {
        System.out.print("Id: " + n.getId() +"\n");
        System.out.print("IP: " + n.getIp() +"\n");
        System.out.print("Puerto: " + n.getPuerto() + "\n");
    }
    
    private int getPuerto(String idNodo)
    {
        String puerto = "";
        char c;
        int i = 0;
        while((c = idNodo.charAt(i)) != ':')
        {
            i++;
        }
        puerto = idNodo.substring(i + 1);
        
        return Integer.parseInt(puerto);
    }
    
    private String getIP(String idNodo)
    {
        String ip = "";
        char c;
        int i = 0;
        while((c = idNodo.charAt(i)) != ':')
        {
            ip+=c;
            i++;
        }
        return ip;
    }
    
    
    private void anunciar()
    {
        Thread hilo = new Thread() {
            public void run() 
            {
                while (true) {
                    try {

                        AdministradorDeOperacionesMulticast.getInstance().anunciar(nodo.getId());
                        TimeUnit.SECONDS.sleep(5);

                    } catch (IOException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
            }
        };

        hilo.start();
    }
    
    private void actualizarListaDeNodosMulticast()
    {
        Thread hilo = new Thread() {
            public void run() 
            {
                while (true) {
                    try {
                       actualizarMulticast();
                    } catch (IOException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };

        hilo.start();
    }
    
    
    private void recibirDatagrama()
    {
        Thread hilo = new Thread() {
            public void run() 
            {
                while (true) 
                {
                    try {
                        actualizarDatagrama();
                    } catch (IOException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };

        hilo.start();
    }
    
    private void enviar()
    {
        while (true) 
                {
                    try {
                        AdministradorDeOperacionesFlujo.getInstance(puerto + 100)
                                .enviarArchivo("" + puerto, this);
                    } catch (IOException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
    }
    
    private void enviarArchivo()
    {
        Thread hilo = new Thread() {
            public void run() 
            {
                
                progreso.setValue(0);
                enviar();
            }
        };

        hilo.start();
    }

    @Override
    public void mensaje(String message) 
    {
        logTemporal += (message + "<br>");
        log.setText(logTemporal);
    }

    @Override
    public void porcentaje(int porcentaje) 
    {
        progreso.setValue(porcentaje);
    }
    

    
    
   
}
