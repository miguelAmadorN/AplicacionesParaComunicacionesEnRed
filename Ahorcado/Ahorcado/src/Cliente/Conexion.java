/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Cliente;

import Clases.Juego;
import Interfaz.PanelFondo;
import Interfaz.TextPrompt;
import Interfaz.UIFunctions;
import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import javax.swing.WindowConstants;

/**
 *
 * @author miguel
 */
public class Conexion extends javax.swing.JDialog implements ActionListener{

    public ObjectOutputStream getOos() {
        return oos;
    }

    public ObjectInputStream getOis() {
        return ois;
    }

    /**
     * Creates new form Conexion
     */
    private ObjectOutputStream oos = null;
    private ObjectInputStream  ois = null;
    private int tamanioPalabra = -1;
    private final PanelFondo contenedor = new PanelFondo("/Imagenes/fondo.jpg");
    public Conexion(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setContentPane(contenedor);
        initComponents();
        init();
        setLocationRelativeTo(null);
        setResizable(false);
        setTitle("Ingresar");
    }
    
    private void placeholder(String text, JTextField textField)
    {
        TextPrompt placeholder = new TextPrompt(text, textField);
        placeholder.changeAlpha(0.75f);
        placeholder.changeStyle(Font.ITALIC);
    }
    
    private void init()
    {
        
        placeholder("IP: 127.0.0.1", ip);
        placeholder("Puerto: 9999", puerto);
        placeholder("Nombre", nombre);
        placeholder("Edad", edad);
        conectar.addActionListener(this);
        iniciar.addActionListener(this);
        iniciar.setVisible(false);
        Image icon = Toolkit.getDefaultToolkit().getImage(getClass()
                        .getResource("/Imagenes/Icono.png"));
        setIconImage(icon); 
            
    }

    public int getTamanioPalabra()
    {
        return tamanioPalabra;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ip = new javax.swing.JTextField();
        puerto = new javax.swing.JTextField();
        conectar = new javax.swing.JButton();
        nombre = new javax.swing.JTextField();
        edad = new javax.swing.JTextField();
        dificultad = new javax.swing.JComboBox<>();
        iniciar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        conectar.setText("Conectar");

        dificultad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fácil", "Difícil" }));

        iniciar.setText("Iniciar");
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });

        jLabel1.setText("Nivel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(puerto, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(conectar)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dificultad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(edad, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(161, 161, 161)
                .addComponent(iniciar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(puerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conectar))
                .addGap(48, 48, 48)
                .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(edad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dificultad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(iniciar)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iniciarActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton conectar;
    private javax.swing.JComboBox<String> dificultad;
    private javax.swing.JTextField edad;
    private javax.swing.JButton iniciar;
    private javax.swing.JTextField ip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField nombre;
    private javax.swing.JTextField puerto;
    // End of variables declaration//GEN-END:variables
    
    
    private boolean conectar(String ip,  int puerto)
    {
        try
        {
            Socket cl = new Socket(ip, puerto);
            System.out.print("Conexion establecida...\n");
            oos = new ObjectOutputStream(cl.getOutputStream());
            ois = new ObjectInputStream(cl.getInputStream());
            return true;
        }
        catch(Exception e)
        {
            e.printStackTrace();
            System.err.print(e);
            return false;
        } 
            
    }
    
    private boolean esNumero(String numero)
    {
        try
        {
            Integer.parseInt(numero);
            return true;
        }catch(Exception e)
        {
            e.printStackTrace();
            return false;
        }
    }
    
    @Override
    public void actionPerformed(ActionEvent ae) 
    {
        if(ae.getSource().equals(conectar))
        {
           
            boolean exitoso = true;
            if(ip.getText().length() > 0 && esNumero(puerto.getText()) )
                exitoso = conectar(ip.getText(), Integer.parseInt(puerto.getText()));
            else
                exitoso = false;
            
            if(exitoso)
            {
                iniciar.setVisible(true);
                conectar.setText("Conectado");
                conectar.setBackground(Color.GREEN);
                conectar.setEnabled(false);
            }
            else
            {
                conectar.setBackground(Color.RED);
                UIFunctions.warningMessage("Verifique la IP y el puerto, si el problema "
                        + "persiste tal vez el servidor esté fuera de servicio", "Verificar datos");
            }
        }
        else if(ae.getSource().equals(iniciar))
        {
            if(nombre.getText().length() > 0 && esNumero(edad.getText()))
            {
                try {
                    tamanioPalabra = AdministradorDeOperaciones.iniciarJuego(getOos(), getOis(),
                            new Juego(nombre.getText(),Integer.parseInt(edad.getText()), 
                                        dificultad.getSelectedIndex()));
                    dispose();
                    
                } catch (IOException ex) {
                    Logger.getLogger(Conexion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Conexion.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                UIFunctions.informationMessage("Verifica tu nombre y edad", "Datos invalidos");
            }
        }
    }
}
