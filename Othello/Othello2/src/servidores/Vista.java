package servidores;

import java.awt.Color;
import java.io.IOException;
import java.net.InetAddress;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author miguel
 * inicializar Nodo actual
 */
public class Vista extends javax.swing.JFrame implements MediadorListener, MulticastListener
{
    
    private int puerto;
    
    private String ip;
    private Nodo nodo;
    private String logTemporal;
    private Mediador MEDIADOR;
    
   
    public Vista() throws IOException {
        initComponents();
        init();
    }

    private void init() throws IOException
    {
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        DialogoPuerto dp = new DialogoPuerto(new javax.swing.JFrame(), true);
        dp.setVisible(true);
        puerto = dp.getPuerto();
        if(puerto == -1 )
            System.exit(0);
        nodosConectados.setContentType("text/html");
        logTemporal = "";
        this.setTitle("" + puerto);
        log.setEditable(false);
        nodosConectados.setEditable(false);
        jpfondo.setBackground(Color.WHITE);
        
        ip = InetAddress.getLocalHost().getHostAddress();
        nodo = new Nodo(ip + ":" + puerto ,ip, puerto); 
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                try {
                    close();
                } catch (IOException ex) {
                    Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    
                }
            }
        });
         
        MEDIADOR =  Mediador.getInstance(puerto);
        anunciar();
        actualizarListaDeNodosMulticast(this);
        recibirDatagramas(this);
        recibirConexionesFlujo();
        System.out.print(puerto+"\n");
         
    }
    
    
    private void close() throws IOException{
        if (JOptionPane.showConfirmDialog(rootPane, "Â¿Deseas salir?",
                "Salir", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            AdministradorDeOperacionesMulticast.getInstance().salirDelAnillo(nodo.getId());
            System.exit(0);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpfondo = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        nodosConectados = new javax.swing.JEditorPane();
        jLabel2 = new javax.swing.JLabel();
        idSiguiente = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        log = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        nodosConectados.setContentType("text/html\n"); // NOI18N
        jScrollPane1.setViewportView(nodosConectados);

        jLabel2.setText("ID Siguiente");

        log.setContentType("text/html"); // NOI18N
        jScrollPane2.setViewportView(log);

        javax.swing.GroupLayout jpfondoLayout = new javax.swing.GroupLayout(jpfondo);
        jpfondo.setLayout(jpfondoLayout);
        jpfondoLayout.setHorizontalGroup(
            jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpfondoLayout.createSequentialGroup()
                .addGroup(jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpfondoLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpfondoLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jpfondoLayout.setVerticalGroup(
            jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpfondoLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpfondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpfondo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpfondo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Vista().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel idSiguiente;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jpfondo;
    private javax.swing.JEditorPane log;
    private javax.swing.JEditorPane nodosConectados;
    // End of variables declaration//GEN-END:variables
    
    
    private void anunciar()
    {
        Thread hilo = new Thread() {
            public void run() 
            {
                while (true) {
                    try {

                        AdministradorDeOperacionesMulticast.getInstance().anunciar(nodo.getId());
                        TimeUnit.SECONDS.sleep(5);

                    } catch (IOException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
            }
        };

        hilo.start();
    }
    
    private void actualizarListaDeNodosMulticast(final MulticastListener ml)
    {
        Thread hilo = new Thread() {
            public void run() 
            {
                while (true) {
                    try {
                       MEDIADOR.actualizarMulticast(ml, nodo.getId());
                    } catch (IOException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };

        hilo.start();
    }
    
    
    private void recibirDatagramas(final MediadorListener ml)
    {
        Thread hilo = new Thread() {
            public void run() 
            {
                while (true) 
                {
                    try {
                        MEDIADOR.actualizarDatagrama(ml, nodo.getId());
                    } catch (IOException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };

        hilo.start();
    }
    
    
    
    private void recibirConexionesFlujo()
    {
        Thread hilo = new Thread() {
            public void run() 
            {
                
                    try {
                        MEDIADOR.nuevaConexion();
                    } catch (IOException ex) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, ex);
                    }
                
            }
        };

        hilo.start();
    }

    @Override
    public void mensaje(String mensaje) 
    {
        logTemporal += (mensaje + "<br>");
        log.setText(logTemporal);
    }
    
    
    

    @Override
    public void nodoSiguiente(String mensaje) 
    { 
        idSiguiente.setText(mensaje);
    }

    @Override
    public void log(String mensaje) 
    {
        nodosConectados.setText(mensaje);
    }

}
